// Copyright Â© Melvyn Laily 2013
// This grammar describes a pseudo xml notation used in configuration files

<% @TinyPG Namespace="Configurator.Parser" OutputPath="../Auto-Generated" %>
<% @Evaluation Generate="False" %>

// Terminals
//Note: due to the way the parser accesses the characters, look-behind constructions won't work.

EOF			-> @"^$"; //Matches an empty string. That is, no more characters to read from the current position.
ENDLINE		-> @"\r?\n\s*|(?=#.*)"; //A single line declaration MUST be followed by a new line or a comment.
EQUAL			-> @"=(?!\s*\r?\n\s*)"; //A single line declaration cannot contain new lines.
TAGOPEN		-> @"<(?!/)(?!\s*\r?\n\s*)"; //A tag declaration cannot contain new lines. The (?!/) forbids the parser to try to match <* before checking for a </ ...
			// => It forces the parser to try to match TagEnd before trying to match a new declaration.
TAGOPENALT		-> @"</(?!\s*\r?\n\s*)"; //A tag declaration cannot contain new lines.
NSOPEN			-> @"<:(?!\s*\r?\n\s*)"; //A namespace declaration cannot contain new lines.
NSCLOSE		-> @"</:(?!\s*\r?\n\s*)"; //A namespace declaration cannot contain new lines.
MULTILINETAGOPEN	-> @"<@(?!\s*\r?\n\s*)"; //A tag declaration cannot contain new lines.
MULTILINETAGOPENALT	-> @"</@(?!\s*\r?\n\s*)"; //A tag declaration cannot contain new lines.
LISTOPEN		-> @"<\*(?!\s*\r?\n\s*)"; //A list declaration cannot contain new lines.
LISTOPENALT		-> @"</\*(?!\s*\r?\n\s*)"; //A list declaration cannot contain new lines.
TAGCLOSE		-> @">";
NAME			-> @"[A-Za-z_][A-Za-z0-9_]*(?!\s*\r?\n\s*)"; //A name cannot be followed by a new line.
MULTILINECONTENT	-> @"(?s).*?(?=</@)"; //A multi-line content can contain anything except an EXPTAGOPENALT token (used to mark the end of the content).
SINGLELINECONTENT	-> @"[^""#\s][^#\r\n]*"; // Can't start with a quote, but can contain quotes thereafter.
QUOTEDCONTENT		-> @"""([^\r\n""]|"""")*"""; //Quoted string. Can contain # and "" (interpreted as a single quote).
SIMPLEITEM		-> @"(?!</\*)(?!<@)[^\s""#]((?!</\*)[^\s#])*"; //Must not start with '</*' or '<@' (but can start with '<'), nor '"' or '#'.
			// The following chars can be anything but a space, a '#' or '</*'.
QUOTEDITEM		-> @"(?!</\*)(?!<@)""([^\r\n""]|"""")*"""; //Same rule as QUOTEDCONTENT but with (?!</\*)(?!<@) at the beginning.

[Skip]
WHITESPACE        	-> @"\s+";

[Skip]
COMMENT		-> @"#.*(?=\n|$)"; //The end of a comment is marked by a new line or the end of the file.

// Production lines LL(1)

Start				-> (Namespace | Declaration)* EOF;
Namespace			-> NamespaceBegin Declaration* NamespaceEnd;
Declaration			-> SimpleDeclaration | ComplexDeclaration | MultiLineDeclaration | ListDeclaration;
SimpleDeclaration		-> NAME EQUAL (SINGLELINECONTENT | QUOTEDCONTENT) ENDLINE;
ComplexDeclaration		-> TagBegin Declaration* TagEnd;
MultiLineDeclaration		-> MultiLineTagBegin MULTILINECONTENT MultiLineTagEnd;
MultiLineItem			-> MultiLineListItemBegin MULTILINECONTENT  MultiLineListItemEnd;
ListDeclaration		-> ListTagBegin (MultiLineItem | (SIMPLEITEM | QUOTEDITEM) )* ListTagEnd;
NamespaceBegin		-> NSOPEN NAME TAGCLOSE;
NamespaceEnd			-> NSCLOSE NAME TAGCLOSE;
TagBegin			-> TAGOPEN NAME TAGCLOSE;
TagEnd				-> TAGOPENALT NAME TAGCLOSE;
MultiLineTagBegin		-> MULTILINETAGOPEN NAME TAGCLOSE;
MultiLineTagEnd		-> MULTILINETAGOPENALT NAME TAGCLOSE;
MultiLineListItemBegin	-> MULTILINETAGOPEN TAGCLOSE;
MultiLineListItemEnd		-> MULTILINETAGOPENALT TAGCLOSE;
ListTagBegin			-> LISTOPEN NAME TAGCLOSE;
ListTagEnd			-> LISTOPENALT NAME TAGCLOSE;